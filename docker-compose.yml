
version: '3.8'

services:
  # --- DATABASE SERVICE ---
  # Runs the PostgreSQL database in its own container.
  db:
    image: postgres:15-alpine # Using alpine is slightly smaller and more secure
    volumes:
      # This persists the database data on the host machine in a docker volume
      - postgres_data:/var/lib/postgresql/data/
    ports:
      # Maps a port on the host server to the internal postgres port for external access/debugging
      - "${POSTGRES_PORT}:5432"
    environment:
      # These variables are read from the .env file and used by Postgres to initialize the database
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      # Docker uses this command to check if the database is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  # --- MESSAGE BROKER SERVICE ---
  # Runs the Redis server for Celery.
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    restart: always

  # --- BACKEND API SERVICE ---
  # Builds and runs your Django application with Gunicorn.
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    # The command to run after the container starts
    command: gunicorn let.wsgi:application --bind 0.0.0.0:8010
    volumes:
      - .:/app # Mounts your code for easier updates
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      # Exposes the port internally to the Docker network for Nginx to connect
      - 8010
    depends_on:
      db:
        condition: service_healthy # Waits for the db to be healthy before starting
      redis:
        condition: service_started # Waits for redis to start
    env_file: ./.env # Loads all variables from the .env file
    restart: always

  # --- CELERY WORKER SERVICE ---
  # Runs the Celery worker to process background tasks.
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A let worker -l info
    volumes:
      - .:/app
    depends_on:
      - backend # Depends on the backend code and settings
      - redis
    env_file: ./.env
    restart: always

  # --- CELERY MONITORING SERVICE ---
  # Runs the Flower web UI to monitor Celery tasks.
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A let flower --address=0.0.0.0 --port=${FLOWER_PORT}
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
    depends_on:
      - celery
      - redis
    env_file: ./.env
    restart: always

  # --- WEB SERVER / REVERSE PROXY ---
  # Runs Nginx to handle incoming public traffic.
  nginx:
    image: nginx:1.25-alpine
    ports:
      # Maps port 8010 on the host server to port 80 in the Nginx container
      - "${DJANGO_PORT}:80"
    volumes:
      # Mounts your custom nginx configuration
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # Mounts the shared volumes for serving static and media files
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - backend
    restart: always

# --- DOCKER VOLUMES ---
# Defines the named volumes to persist data.
volumes:
  postgres_data:
  static_volume:
  media_volume:
